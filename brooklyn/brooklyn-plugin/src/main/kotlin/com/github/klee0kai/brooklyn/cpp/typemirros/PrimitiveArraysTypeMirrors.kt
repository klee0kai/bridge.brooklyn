package com.github.klee0kai.brooklyn.cpp.typemirros

import com.github.klee0kai.brooklyn.cpp.typemirros.CppTypeMirror
import org.jetbrains.kotlin.ir.types.*
import org.jetbrains.kotlin.ir.util.kotlinFqName

internal fun primitiveArraysTypeMirrors() = arrayOf(
    CppTypeMirror(
        jniTypeCode = "[Z",
        cppSimpleTypeMirrorStr = "int",
        cppFullTypeMirror = "std::vector<int>",
        jniTypeStr = "jbooleanArray",
        checkIrType = {
            it.isBooleanArray()
        },
        transformToCpp = { variable -> "*brooklyn::mapper::mapFromJBooleanArray(env, ${variable}) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJBooleanArray(env,  std::make_shared<std::vector<int>>(   $variable ) ) " },
    ),
    CppTypeMirror(
        jniTypeCode = "[Z",
        cppSimpleTypeMirrorStr = "int",
        cppFullTypeMirror = "std::shared_ptr<std::vector<int>>",
        jniTypeStr = "jbooleanArray",
        checkIrType = { it.isNullable() && it.getClass()?.kotlinFqName?.toString() == "kotlin.BooleanArray" },
        transformToCpp = { variable -> "brooklyn::mapper::mapFromJBooleanArray(env, $variable ) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJBooleanArray(env,  $variable ) " },
    ),
    CppTypeMirror(
        jniTypeCode = "[B",
        cppSimpleTypeMirrorStr = "int",
        cppFullTypeMirror = "std::vector<int>",
        jniTypeStr = "jbyteArray",
        checkIrType = { it.isByteArray() },
        transformToCpp = { variable -> "*brooklyn::mapper::mapFromJByteArray(env, ${variable}) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJByteArray(env,  std::make_shared<std::vector<int>>(   $variable ) ) " },
    ),
    CppTypeMirror(
        jniTypeCode = "[B",
        cppSimpleTypeMirrorStr = "int",
        cppFullTypeMirror = "std::shared_ptr<std::vector<int>>",
        jniTypeStr = "jbyteArray",
        checkIrType = { it.isNullable() && it.getClass()?.kotlinFqName?.toString() == "kotlin.ByteArray" },
        transformToCpp = { variable -> "brooklyn::mapper::mapFromJByteArray(env, $variable ) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJByteArray(env, $variable  ) " },
    ),
    CppTypeMirror(
        jniTypeCode = "[C",
        cppSimpleTypeMirrorStr = "char",
        cppFullTypeMirror = "std::vector<char>",
        jniTypeStr = "jcharArray",
        checkIrType = { it.isCharArray() },
        transformToCpp = { variable -> "*brooklyn::mapper::mapFromJCharArray(env, ${variable}) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJCharArray(env,  std::make_shared<std::vector<char>>(   $variable ) ) " },
    ),
    CppTypeMirror(
        jniTypeCode = "[C",
        cppSimpleTypeMirrorStr = "char",
        cppFullTypeMirror = "std::shared_ptr<std::vector<char>>",
        jniTypeStr = "jcharArray",
        checkIrType = { it.isNullable() && it.getClass()?.kotlinFqName?.toString() == "kotlin.CharArray" },
        transformToCpp = { variable -> "brooklyn::mapper::mapFromJCharArray(env, $variable )" },
        transformToJni = { variable -> "brooklyn::mapper::mapToJCharArray(env, $variable )" },
    ),
    CppTypeMirror(
        jniTypeCode = "[S",
        cppSimpleTypeMirrorStr = "int",
        cppFullTypeMirror = "std::vector<int>",
        jniTypeStr = "jshortArray",
        checkIrType = { it.isShortArray() },
        transformToCpp = { variable -> "*brooklyn::mapper::mapFromJShortArray(env, ${variable}) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJShortArray(env,  std::make_shared<std::vector<int>>(   $variable ) ) " },
    ),
    CppTypeMirror(
        jniTypeCode = "[S",
        cppSimpleTypeMirrorStr = "int",
        cppFullTypeMirror = "std::shared_ptr<std::vector<int>>",
        jniTypeStr = "jshortArray",
        checkIrType = { it.isNullable() && it.getClass()?.kotlinFqName?.toString() == "kotlin.ShortArray" },
        transformToCpp = { variable -> "brooklyn::mapper::mapFromJShortArray(env, $variable )" },
        transformToJni = { variable -> "brooklyn::mapper::mapToJShortArray(env, $variable )" },
    ),
    CppTypeMirror(
        jniTypeCode = "[I",
        cppSimpleTypeMirrorStr = "int",
        cppFullTypeMirror = "std::vector<int>",
        jniTypeStr = "jintArray",
        checkIrType = { it.isIntArray() },
        transformToCpp = { variable -> "*brooklyn::mapper::mapFromJIntegerArray(env, ${variable}) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJIntegerArray(env,  std::make_shared<std::vector<int>>(   $variable ) ) " },
    ),
    CppTypeMirror(
        jniTypeCode = "[I",
        cppSimpleTypeMirrorStr = "int",
        cppFullTypeMirror = "std::shared_ptr<std::vector<int>>",
        jniTypeStr = "jintArray",
        checkIrType = { it.isNullable() && it.getClass()?.kotlinFqName?.toString() == "kotlin.IntArray" },
        transformToCpp = { variable -> "brooklyn::mapper::mapFromJIntegerArray(env, ${variable})" },
        transformToJni = { variable -> "brooklyn::mapper::mapToJIntegerArray(env,  $variable )" },
    ),
    CppTypeMirror(
        jniTypeCode = "[J",
        cppSimpleTypeMirrorStr = "int64_t",
        cppFullTypeMirror = "std::vector<int64_t>",
        jniTypeStr = "jlongArray",
        checkIrType = { it.isLongArray() },
        transformToCpp = { variable -> "*brooklyn::mapper::mapFromJLongArray(env, ${variable}) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJLongArray(env,  std::make_shared<std::vector<int64_t>>(   $variable ) ) " },
    ),
    CppTypeMirror(
        jniTypeCode = "[J",
        cppSimpleTypeMirrorStr = "int64_t",
        cppFullTypeMirror = "std::shared_ptr<std::vector<int64_t>>",
        jniTypeStr = "jlongArray",
        checkIrType = { it.isNullable() && it.getClass()?.kotlinFqName?.toString() == "kotlin.LongArray" },
        transformToCpp = { variable -> "brooklyn::mapper::mapFromJLongArray(env, $variable )" },
        transformToJni = { variable -> "brooklyn::mapper::mapToJLongArray(env, $variable )" },
    ),
    CppTypeMirror(
        jniTypeCode = "[F",
        cppSimpleTypeMirrorStr = "float",
        cppFullTypeMirror = "std::vector<float>",
        jniTypeStr = "jfloatArray",
        checkIrType = { it.isFloatArray() },
        transformToCpp = { variable -> "*brooklyn::mapper::mapFromJFloatArray(env, ${variable}) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJFloatArray(env,  std::make_shared<std::vector<float>>(   $variable ) ) " },
    ),
    CppTypeMirror(
        jniTypeCode = "[F",
        cppSimpleTypeMirrorStr = "float",
        cppFullTypeMirror = "std::shared_ptr<std::vector<float>>",
        jniTypeStr = "jfloatArray",
        checkIrType = { it.isNullable() && it.getClass()?.kotlinFqName?.toString() == "kotlin.FloatArray" },
        transformToCpp = { variable -> "brooklyn::mapper::mapFromJFloatArray(env, $variable )" },
        transformToJni = { variable -> "brooklyn::mapper::mapToJFloatArray(env,  $variable )" },
    ),
    CppTypeMirror(
        jniTypeCode = "[D",
        cppSimpleTypeMirrorStr = "double",
        cppFullTypeMirror = "std::vector<double>",
        jniTypeStr = "jdoubleArray",
        checkIrType = { it.isDoubleArray() },
        transformToCpp = { variable -> "*brooklyn::mapper::mapFromJDoubleArray(env, ${variable}) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJDoubleArray(env,  std::make_shared<std::vector<double>>(   $variable ) ) " },
    ),
    CppTypeMirror(
        jniTypeCode = "[D",
        cppSimpleTypeMirrorStr = "double",
        cppFullTypeMirror = "std::shared_ptr<std::vector<double>>",
        jniTypeStr = "jdoubleArray",
        checkIrType = { it.isNullable() && it.getClass()?.kotlinFqName?.toString() == "kotlin.DoubleArray" },
        transformToCpp = { variable -> "brooklyn::mapper::mapFromJDoubleArray(env, $variable ) " },
        transformToJni = { variable -> "brooklyn::mapper::mapToJDoubleArray(env, $variable )  " },
    ),


    )
